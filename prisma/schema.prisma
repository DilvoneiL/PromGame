datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modelo Cliente
model Cliente {
  id     String  @id @default(cuid()) @map("_id")
  nome   String
  email  String  @unique
  senha  String?
}

// Modelo Site
model Site {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  nome     String
  endereco String
  ofertas   Oferta[] // Relacionamento 1:N com Oferta
}

// Modelo Categoria
model Categoria {
  id        String      @id @map("_id") @default(auto()) @db.ObjectId
  nome      String
  descricao String
  jogos     JogosCategorias[] // Relacionamento com Jogo
}

// Modelo Oferta
model Oferta {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  endereco  String
  preco     Float
  siteId    String   @db.ObjectId
  site      Site    @relation(fields: [siteId], references: [id])
  jogoId    String   @db.ObjectId
  jogo      Jogo    @relation("JogoOfertas", fields: [jogoId], references: [id], onDelete: Cascade)
}

// Modelo Jogo
model Jogo {
  id          String  @id @map("_id") @default(auto()) @db.ObjectId
  nome        String
  ano         DateTime
  publisher   String
  descricao   String
  imagemUrl   String  @default("/upload.png")
  categorias  JogosCategorias[]
  ofertas     Oferta[]  @relation("JogoOfertas")
  listaDesejos ListaDesejos[]
  avaliacoes    Avaliacao[]  // Adiciona relação inversa
}

// Modelo JogosCategorias
model JogosCategorias {
  id           String       @id @map("_id") @default(auto()) @db.ObjectId
  jogoId       String       @db.ObjectId
  categoriaId  String?      @db.ObjectId
  jogo         Jogo         @relation(fields: [jogoId], references: [id], onDelete: Cascade)
  categoria    Categoria?   @relation(fields: [categoriaId], references: [id])
}

// Modelo User (NextAuth)
model User {
  id            String  @id @map("_id") @default(auto()) @db.ObjectId
  name          String?
  email         String?  @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String   @default("NORMAL")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  listaDesejos  ListaDesejos[]
  avaliacoes  Avaliacao[]  // Adiciona relação inversa

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo Account (NextAuth)
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo Session (NextAuth)
model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo VerificationToken (NextAuth)
model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Modelo Authenticator (NextAuth)
model Authenticator {
  id                   String  @id @default(cuid()) @map("_id")
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// Modelo ListaDesejos (Lista de Desejos dos Usuários)
model ListaDesejos {
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  userId   String  @db.ObjectId
  jogoId   String  @db.ObjectId
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  jogo     Jogo    @relation(fields: [jogoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// Modelo Avaliação
model Avaliacao {
  id      String  @id @map("_id") @default(auto()) @db.ObjectId
  jogoId  String  @db.ObjectId
  jogo    Jogo    @relation(fields: [jogoId], references: [id], onDelete: Cascade)
  userId  String  @db.ObjectId
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  nota    Int     
  createdAt DateTime @default(now())
}
